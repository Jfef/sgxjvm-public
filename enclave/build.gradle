plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'com.r3.sgx.enclave'
    id 'com.r3.sgx.host'
}

repositories {
    jcenter()
    mavenLocal()
    maven {
        url = "https://ci-artifactory.corda.r3cev.com/artifactory/oblivium"
    }
}

docker {
    registryCredentials {
        url = System.getenv("REGISTRY_URL")
        username = System.getenv("REGISTRY_USERNAME")
        password = System.getenv("REGISTRY_PASSWORD")
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.r3.sgx:api-core-enclave:$oblivium_version"

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "com.r3.sgx:api-core-host:$oblivium_version"
    testImplementation "com.r3.sgx:enclave-testing:$oblivium_version"
    testRuntimeOnly "com.r3.sgx:native-host-simulation:$oblivium_version"
}

shadowJar {
    archiveBaseName = 'rng-enclave'
    zip64 = true

    manifest {
        attributes("Enclave-Class": "com.r3.sgx.rng.enclave.RngEnclave")
    }
}

test {
    dependsOn buildSignedEnclaveSimulation
    systemProperty("com.r3.sgx.enclave.path", buildSignedEnclaveSimulation.signedEnclavePath)
}

enclaveImageDebug {
    enclaveObject = tasks.getByName('buildSignedEnclaveDebug').outputSignedEnclave
    publishImageName = "oblivium/oblivium-rng-enclave-server"
}

def publishBaseContainer = gradle.includedBuilds.findResult {
    return (it.name == 'oblivium') ? it.task(':containers:enclavelet-host-debug:pushImageTest') : null
}

buildEnclaveImageDebug {
    if (publishBaseContainer != null) {
        dependsOn publishBaseContainer
    }
}

enclaveRelease {
    shouldUseDummyKey = false
}
