.. _sgx-gradle-enclave-plugin:

SGX Enclave Plugin
==================

The SGX Enclave plugin creates Gradle tasks that generate a "fat jar"
containing your Enclavelet classes, link this with a partial JVM enclave and
then sign the resulting enclave.

You can apply this plugin as follows:

.. parsed-literal::

    plugins {
        id 'com.r3.sgx.enclave'
    }

..

which will also implicitly apply the
`Shadow plugin <https://imperceptiblethoughts.com/shadow/>`__.

Configuration
-------------

The plugin registers these Gradle extension objects, where ``<Type>`` is a
placeholder for either ``Simulation``, ``Debug`` or ``Release``.

.. parsed-literal::

    enclave<Type> {
        configuration = file("path/to/enclave.xml")
        shouldUseDummyKey = (TRUE | false)
        mrsignerPublicKey = file("path/to/mrsigner.public.pem")
        mrsignerSignature = file("path/to/mrsigner.signature.bin")
    }

..

Tasks
-----

It creates these tasks for each of ``Simulation``, ``Debug`` and ``Release``:

* ``copyPartialEnclave<Type>``
    Unzips the contents of ``com.r3.sgx:native-enclave-<type>-<Oblivium version>.jar`` into ``build/sgx-plugin/partial-enclaves``.
* ``buildUnsignedEnclave<Type>``
    Links the basic JVM-in-SGX enclave object with the user's enclavelet object to create an unsigned SGX enclave object. Also
    strips all linker symbols from a ``Release`` enclave to ensure that the build is reproducible.
* ``signEnclaveWithDummyKey<Type>``
    Signs an enclave with a private key generated by the ``createDummyKey`` task.
* ``getEnclaveSigningMaterial<Type>``
    Generates SGX signing material for an unsigned enclave object.
* ``addEnclaveSignature<Type>``
    Signs an enclave using the public key from ``mrsignerPublicKey``, signature file from ``mrsignerSignature``
    and signing material from the enclave.
* ``generateEnclaveletMetadata<Type>``
    Extracts the enclavelet's class name and the SGX measurement from a signed
    enclave object. If ``shouldUseDummyKey`` is ``true`` then this task depends on
    the ``signEnclaveWithDummyKey<Type>`` task. Otherwise it depends on the
    ``addEnclaveSignature<Type>`` task.
* ``buildSignedEnclave<Type>``
    Top-level task that generates a signed SGX enclave object. This task does nothing by itself and only acts
    as an integration point for the other tasks and their outputs.

