// DOCS_ENCLAVE_BUILD_BEGIN
plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'com.r3.sgx.host'
}

repositories {
    jcenter()
    mavenLocal()
    maven {
        url = "https://ci-artifactory.corda.r3cev.com/artifactory/oblivium"
    }
}

ext {
    grpcTestPort = 44444
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "com.r3.sgx:api-core-enclave:$oblivium_version"

    testImplementation project(':samples:rng:rng-client-common')
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "com.r3.sgx:api-core-host:$oblivium_version"
    testImplementation "com.r3.sgx:enclavelet-host-client:$oblivium_version"
    testImplementation "com.r3.sgx:enclave-testing:$oblivium_version"
    testImplementation "org.slf4j:slf4j-api:$slf4j_version"
    testRuntimeOnly "com.r3.sgx:native-host-simulation:$oblivium_version"
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
}

shadowJar {
    archiveBaseName = 'rng-enclave'
    archiveClassifier = ''
    zip64 = true

    manifest {
        attributes("Enclave-Class": "com.r3.sgx.rng.enclave.RngEnclave")
    }
}

jar {
    archiveClassifier = 'ignore'
}

test {
    dependsOn buildSignedEnclaveSimulation, startEnclaveContainerSimulation
    systemProperty("com.r3.sgx.enclave.path", buildSignedEnclaveSimulation.signedEnclavePath)
    systemProperty("com.r3.sgx.enclave.simulated.grpc.port", grpcTestPort)
    finalizedBy stopEnclaveContainerSimulation
}

enclaveRelease {
    shouldUseDummyKey = false
}
// DOCS_ENCLAVE_BUILD_END

docker {
    registryCredentials {
        url      = System.getenv("OBLIVIUM_CONTAINER_REGISTRY_URL")      ?: "localhost:5000"
        username = System.getenv("OBLIVIUM_CONTAINER_REGISTRY_USERNAME") ?: null
        password = System.getenv("OBLIVIUM_CONTAINER_REGISTRY_PASSWORD") ?: null
    }
}

enclaveImageSimulation {
    publishImageName = "$name-dev"
    testing {
        grpcPort = grpcTestPort
        startTimeout = 60
    }
}

enclaveImageRelease {
    publishImageName = "$name-dev"
}

enclaveImageDebug {
    publishImageName = "$name-dev"
}

def buildBaseImage = gradle.includedBuilds.findResult {
    return (it.name == 'oblivium') ? it.task(':containers:enclavelet-host:buildImagePublish') : null
}

if (buildBaseImage) {
    buildEnclaveImageDebug.dependsOn buildBaseImage
    buildEnclaveImageSimulation.dependsOn buildBaseImage
}
