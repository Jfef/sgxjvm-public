import com.r3.sgx.plugin.enclave.SignEnclave

plugins {
    id 'com.github.johnrengelman.shadow'
    id 'application'
}

apply plugin: 'kotlin-platform-jvm'

repositories {
    jcenter()
    maven {
        url = "https://ci-artifactory.corda.r3cev.com/artifactory/oblivium"
    }
}

configurations {
    frontend
    enclave
}

dependencies {
    frontend project(':host:frontend')
    expectedBy project(':host:common')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.r3.sgx:api-core-host:$oblivium_version"
    implementation "io.dropwizard:dropwizard-core:$dropwizard_version"
    implementation "io.dropwizard:dropwizard-assets:$dropwizard_version"

    runtimeOnly "com.r3.sgx:native-host-release:$oblivium_version"
}

def frontendConfiguration = configurations.frontend

mainClassName = "com.r3.sgx.rng.host.Main"

shadowJar {
    def signEnclaveTask = project(':enclave').getTasks().getByName('signEnclaveWithDummyKeyRelease') as SignEnclave
    dependsOn frontendConfiguration, signEnclaveTask
    baseName = "rng-host"
    mergeServiceFiles()
    frontendConfiguration.each { file ->
        into '/static/js', {
            from zipTree(file.absolutePath), {
                include 'frontend.js'
                include 'kotlin.js'
                include 'kotlin.js.map'
            }
        }
        into '/static', {
            from zipTree(file.absolutePath), {
                include 'index.html'
                include 'stylesheet.css'
            }
        }
    }
    into '/enclave', {
        from signEnclaveTask.signedEnclavePath
    }
    zip64 true
}

runShadow {
    args 'server', "$projectDir/config.yml"
}